// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id        String     @id @default(uuid())
    email     String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    role      Role       @default(USER)
    store     store[]
    Cart      cart[]
    Shipping  Shipping[]
    Order     Order[]

    @@index([email])
}

model store {
    id         String    @id @default(uuid())
    name       String
    address    String
    banner_key String?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    userId     String
    user       user      @relation(fields: [userId], references: [id])
    product    product[]
}

model product {
    id           Int            @id @default(autoincrement())
    name         String
    description  String
    images       images[]
    storeId      String
    store        store          @relation(fields: [storeId], references: [id])
    priceAndsize priceAndsize[]
}

model priceAndsize {
    id        Int        @id @default(autoincrement())
    price     Float
    size      String
    productId Int
    quantity  Int
    product   product    @relation(fields: [productId], references: [id])
    CartItem  CartItem[]
}

model images {
    id        Int     @id @default(autoincrement())
    key       String
    productId Int
    product   product @relation(fields: [productId], references: [id])
}

model cart {
    id        String     @id @default(uuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      user?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?
    items     CartItem[]
}

model CartItem {
    id             String       @id @default(uuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    quantity       Int
    cartId         String
    cart           cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
    priceAndsizeId Int
    priceAndsize   priceAndsize @relation(fields: [priceAndsizeId], references: [id])
}

model Shipping {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    firstName     String
    lastName      String
    StreetAddress String
    unitOrBldgNo  String
    suburb        String
    province      String
    city          String
    zip           String
    country       String
    phoneNumber   String
    email         String
    user          user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
}

model Order {
    id        String      @id @default(uuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    user      user?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?
    OrderItem OrderItem[]
}

model OrderItem {
    id             String   @id @default(uuid())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    quantity       Int
    orderId        String
    order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    priceAndsizeId Int
    price          Int
}

enum Role {
    ADMIN
    USER
    OWNER
}
